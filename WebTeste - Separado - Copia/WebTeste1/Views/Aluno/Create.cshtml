@model Aluno
@{
    ViewData["Title"] = "Cadastrar Aluno";
}
<h1 style="text-align: center">Cadastrar Aluno</h1>
<hr />

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @*<div class = "row">
            <div class="col-sm-2">
                @Html.LabelFor(model => model.Matricula)
                @Html.EditorFor(model => model.Matricula, new { htmlAttributes = new { @class = "form-control", oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);", @maxlength = "9", placeholder = "Matrícula do aluno", onkeypress = "return isNumberKey(event);" } })
                @Html.ValidationMessageFor(model => model.Matricula, "", new { @class = "text-danger" })    
            </div>
            <div class = "col-sm-10">
                @Html.LabelFor(model => model.Nome)
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control", placeholder = "Nome do aluno" } })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class = "row">
            <div class = "col">
                @Html.LabelFor(model => model.Sexo)
                @Html.DropDownList("Sexo", (IEnumerable<SelectListItem>)ViewBag.Sex, "Selecione Sexo", htmlAttributes: new { @class = "form-control"})
                @Html.ValidationMessageFor(model => model.Sexo, "", new {@class = "text-danger"})
            </div>
            <div class = "col">
                @Html.LabelFor(model => model.Nascimento)
                @Html.EditorFor(model => model.Nascimento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nascimento, "", new { @class = "text-danger" })
            </div>
            <div class = "col">
                @Html.LabelFor(model => model.CPF, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.CPF, new { htmlAttributes = new { @class = "form-control", placeholder = "(Opcional) Apenas dígitos", onblur = "formataCPF(this)", data_tipo = "cpf" } })
                @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Matricula, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Matricula, new { htmlAttributes = new { @class = "form-control", oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);", @maxlength = "9", placeholder = "Matrícula do aluno", onkeypress = "return isNumberKey(event);" } })
                @Html.ValidationMessageFor(model => model.Matricula, "", new { @class = "text-danger" })    
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control", placeholder = "Nome do aluno" } })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Sexo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Sexo", (IEnumerable<SelectListItem>)ViewBag.Sex, "Selecione Sexo", htmlAttributes: new { @class = "form-control"})
                @Html.ValidationMessageFor(model => model.Sexo, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Nascimento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nascimento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nascimento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CPF, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CPF, new { htmlAttributes = new { @class = "form-control", placeholder = "(Opcional) Apenas dígitos", /*onkeyup = "keyDownCpf(e)",*/ onkeyup = "formataCPF(this)", data_tipo = "cpf", @maxlength = "11" } })
                @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })
            </div>
        </div>

        <br>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type = "button" class = "btn btn-danger" value = "Voltar" onclick="location.href='@Url.Action("Index", "Aluno")'" />
                <input type = "submit" value = "Cadastrar" class = "btn btn-dark"/>
            </div>
        </div>
    </div>
}

<script>
    function formataCPF(cpf) {
    const elementoAlvo = cpf
    const cpfAtual = cpf.value   

    let cpfAtualizado;

    cpfAtualizado = cpfAtual.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, 
    function( regex, argumento1, argumento2, argumento3, argumento4 ) {
        return argumento1 + '.' + argumento2 + '.' + argumento3 + '-' + argumento4; })  
    elementoAlvo.value = cpfAtualizado;
    }
</script>

@*<script>
    var keyEnabledArray = Array(222).fill(true);
    function onKeyDownCpf(e){
        if(keyEnabledArray[e.keyCode]) {
            keyEnabledArray[e.keyCode] = false;
        }
    }
</script>*@

<script>    
    $(document).ready(function() {
        $('#number').bind("cut copy paste drag drop", function(e) {
            e.preventDefault();
        });     
    });
    function isNumberKey(evt){
        var charCode = (evt.which) ? evt.which : evt.keyCode
        return !(charCode > 31 && (charCode < 48 || charCode > 57));
    }
</script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>